================================================================================
JOB STARTED: Sat Apr 19 03:45:12 PM EDT 2025
NODE: biomix14.dbi.local
SCRIPT /var/spool/slurm/d/job1014481/slurm_script:
#!/bin/bash
#SBATCH --job-name=trimming
#SBATCH --mem=32G
#SBATCH --cpus-per-task=16

### SCRIPT TRIMS RAW SEQUENCE DATA
### SOFTWARE USED: TrimGalore!, cutadapt, FastQC

##JOB LOG HEADER - Puts a copy of this script &  other debugging info in "slurm.out"
  perl -E 'say"="x80'; echo "JOB STARTED: $(date)"; echo "NODE: $(hostname)"; echo "SCRIPT ${0}:"; cat $0; perl -E 'say"="x80'

## SOFTWARE REQUIREMENTS
  export PATH=$PATH:/usr/local/FastQC

## PRIMARY VARIABLES - commonly need to change                                                    # TIP: ${HOME} inserts your home directory
  FASTQ_IN="/home/assmith/project_1/raw_data/liver/liver_d.s.fastq.gz"     # FASTQ FILE LOCATION
  OUTDIR="/home/assmith/project_1/outfiles/a-mapping"                                               # OUTPUT DIRECTORY

## SECONDARY VARIABLES - rarely need to change
  MIN_LEN=40            # MINIMUM READ LENGTH TO KEEP
  MIN_QUAL=28           # MIN QUAL SCORE (PHRED) TO TRIM
  CPU=4                 # CPU CORES - TG oddly uses 4x this # - make sure #SBATCH requests enough (e.g. 16 for 4)

## COMMAND(s) TO RUN
  mkdir -p ${OUTDIR}    # MAKE SURE OUTPUT DIRECTORY EXISTS
  cd ${OUTDIR}          # CHANGE TO OUTPUT DIRECTORY

## Use _TrimGalore!_ to remove low quality sequences and adapters using _cutadapt_
 # It will also rerun _FastQC_ so you can see how the trimming worked...
    trim_galore \
      --length ${MIN_LEN} \
      --quality ${MIN_QUAL} \
      --cores ${CPU} \
      --fastqc \
      --fastqc_args "--threads ${SLURM_CPUS_PER_TASK}" \
      ${FASTQ_IN}

## JOB CLEANUP
  perl -E 'say"="x80'; echo "JOB COMPLETED: $(date)"; perl -E 'say"="x80'
================================================================================
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.4
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 4 cores
pigz 2.7
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 4 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> /home/assmith/project_1/raw_data/liver/liver_d.s.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	31181	AGATCGGAAGAGC	1000000	3.12
smallRNA	5	TGGAATTCTCGG	1000000	0.00
Nextera	3	CTGTCTCTTATA	1000000	0.00
Using Illumina adapter for trimming (count: 31181). Second best hit was smallRNA (count: 5)

Writing report to 'liver_d.s.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: /home/assmith/project_1/raw_data/liver/liver_d.s.fastq.gz
Trimming mode: single-end
Trim Galore version: 0.6.10
Cutadapt version: 4.4
Python version: 3.10.10
Number of cores used for trimming: 4
Quality Phred score cutoff: 28
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length before a sequence gets removed: 40 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '--threads 16'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.4). Setting -j 4
Writing final adapter and quality trimmed output to liver_d.s_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 28') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file /home/assmith/project_1/raw_data/liver/liver_d.s.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 4.4 with Python 3.10.10
Command line parameters: -j 4 -e 0.1 -q 28 -O 1 -a AGATCGGAAGAGC /home/assmith/project_1/raw_data/liver/liver_d.s.fastq.gz
Processing single-end reads on 4 cores ...
Finished in 155.344 s (7.767 Âµs/read; 7.72 M reads/minute).

=== Summary ===

Total reads processed:              20,000,000
Reads with adapters:                 7,165,120 (35.8%)
Reads written (passing filters):    20,000,000 (100.0%)

Total basepairs processed: 2,020,000,000 bp
Quality-trimmed:             388,348,686 bp (19.2%)
Total written (filtered):  1,610,396,391 bp (79.7%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 7165120 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 30.5%
  C: 32.0%
  G: 21.9%
  T: 15.3%
  none/other: 0.3%

Overview of removed sequences
length	count	expect	max.err	error counts
1	4222890	5000000.0	0	4222890
2	1737563	1250000.0	0	1737563
3	400677	312500.0	0	400677
4	87840	78125.0	0	87840
5	64356	19531.2	0	64356
6	50642	4882.8	0	50642
7	41465	1220.7	0	41465
8	41551	305.2	0	41551
9	34548	76.3	0	34213 335
10	31133	19.1	1	29841 1292
11	24418	4.8	1	23626 792
12	28269	1.2	1	27492 777
13	23704	0.3	1	22815 889
14	25586	0.3	1	24619 967
15	29232	0.3	1	28077 1155
16	24882	0.3	1	23815 1067
17	38259	0.3	1	36582 1677
18	38310	0.3	1	36973 1337
19	6658	0.3	1	6348 310
20	15929	0.3	1	15369 560
21	9604	0.3	1	9213 391
22	12831	0.3	1	12349 482
23	14919	0.3	1	14352 567
24	10261	0.3	1	9801 460
25	16435	0.3	1	15732 703
26	8774	0.3	1	8373 401
27	14517	0.3	1	13489 1028
28	16428	0.3	1	15600 828
29	11512	0.3	1	10789 723
30	12191	0.3	1	11691 500
31	3196	0.3	1	3003 193
32	5591	0.3	1	5272 319
33	4028	0.3	1	3769 259
34	5905	0.3	1	5490 415
35	6886	0.3	1	6058 828
36	7656	0.3	1	6985 671
37	4210	0.3	1	3884 326
38	2466	0.3	1	1699 767
39	4142	0.3	1	3836 306
40	979	0.3	1	645 334
41	1722	0.3	1	1524 198
42	703	0.3	1	602 101
43	606	0.3	1	548 58
44	445	0.3	1	315 130
45	1201	0.3	1	849 352
46	1159	0.3	1	1060 99
47	391	0.3	1	247 144
48	309	0.3	1	228 81
49	373	0.3	1	293 80
50	303	0.3	1	205 98
51	602	0.3	1	320 282
52	1346	0.3	1	617 729
53	1145	0.3	1	1040 105
54	230	0.3	1	113 117
55	283	0.3	1	152 131
56	399	0.3	1	200 199
57	591	0.3	1	213 378
58	952	0.3	1	566 386
59	661	0.3	1	418 243
60	673	0.3	1	224 449
61	810	0.3	1	514 296
62	1210	0.3	1	368 842
63	2295	0.3	1	948 1347
64	1308	0.3	1	1060 248
65	345	0.3	1	175 170
66	384	0.3	1	150 234
67	588	0.3	1	219 369
68	945	0.3	1	354 591
69	1134	0.3	1	437 697
70	962	0.3	1	617 345
71	355	0.3	1	228 127
72	67	0.3	1	57 10
73	25	0.3	1	17 8
74	6	0.3	1	3 3
75	4	0.3	1	0 4
76	7	0.3	1	1 6
77	19	0.3	1	0 19
78	5	0.3	1	0 5
79	2	0.3	1	0 2
80	6	0.3	1	0 6
81	5	0.3	1	0 5
82	2	0.3	1	0 2
83	4	0.3	1	0 4
84	1	0.3	1	0 1
85	6	0.3	1	0 6
86	6	0.3	1	0 6
87	8	0.3	1	0 8
88	7	0.3	1	0 7
89	6	0.3	1	0 6
90	5	0.3	1	0 5
91	11	0.3	1	0 11
92	8	0.3	1	0 8
93	6	0.3	1	0 6
94	3	0.3	1	0 3
95	1	0.3	1	0 1
97	5	0.3	1	0 5
98	10	0.3	1	0 10
99	7	0.3	1	0 7
100	3	0.3	1	0 3
101	2	0.3	1	1 1

RUN STATISTICS FOR INPUT FILE: /home/assmith/project_1/raw_data/liver/liver_d.s.fastq.gz
=============================================
20000000 sequences processed in total
Sequences removed because they became shorter than the length cutoff of 40 bp:	2004654 (10.0%)


  >>> Now running FastQC on the data <<<

Started analysis of liver_d.s_trimmed.fq.gz
Approx 5% complete for liver_d.s_trimmed.fq.gz
Approx 10% complete for liver_d.s_trimmed.fq.gz
Approx 15% complete for liver_d.s_trimmed.fq.gz
Approx 20% complete for liver_d.s_trimmed.fq.gz
Approx 25% complete for liver_d.s_trimmed.fq.gz
Approx 30% complete for liver_d.s_trimmed.fq.gz
Approx 35% complete for liver_d.s_trimmed.fq.gz
Approx 40% complete for liver_d.s_trimmed.fq.gz
Approx 45% complete for liver_d.s_trimmed.fq.gz
Approx 50% complete for liver_d.s_trimmed.fq.gz
Approx 55% complete for liver_d.s_trimmed.fq.gz
Approx 60% complete for liver_d.s_trimmed.fq.gz
Approx 65% complete for liver_d.s_trimmed.fq.gz
Approx 70% complete for liver_d.s_trimmed.fq.gz
Approx 75% complete for liver_d.s_trimmed.fq.gz
Approx 80% complete for liver_d.s_trimmed.fq.gz
Approx 85% complete for liver_d.s_trimmed.fq.gz
Approx 90% complete for liver_d.s_trimmed.fq.gz
Approx 95% complete for liver_d.s_trimmed.fq.gz
Analysis complete for liver_d.s_trimmed.fq.gz
================================================================================
JOB COMPLETED: Sat Apr 19 03:49:53 PM EDT 2025
================================================================================
